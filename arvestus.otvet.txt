Методы и модели ПО.
1. Перечисли этапы развития ПО
	1)Описание потребностей и их анализ
	2)Дизайн программного продукта
	3)Разработка
	4)Проверка
	5)Выпуск и внедрение продукта
	6)Обслуживание продукта
2. На каком этапе образовавшиеся ошибки дороже всего устранять?
	После выпуска продукта
3. После какого или на каком этапе разумнее всего начать писать код (заниматься программированием)
	после описания потребностей 
4. Что понимается в развитии ПО под абстракцией?
	Под этим понимается подход, где при анализе какого-либо явления отбрасываются незначительные детали, которые не играют роли в контексте решения данной проблемы.
5. Какие преимущества развития в ПО с открытым кодом?
	В случае с открытым кодом программный код в общем случае делается общедоступным, скрываются только пароли и прочая подобная информация.
	В случае проектов порождающих большой и широкий интерес у публики, есть надежда, что заинтересованные люди будут готовы самостоятельно дополнить и проверить некоторые части создаваемого ПО. 
6. Какие преимущества развития в ПО с закрытым кодом?
	В случае разработки систем с закрытым исходным кодом конечному пользователю доступен лишь готовый к установке продукт, всё связанное с разработкой ПО остаётся внутренним делом фирмы-разработчика.
	Таким образом, фирма-разработчик может также отдельно продать разработанные в ходе проекта модули в другое место.
7. Назови различие монументальной и агильной методики развития?.
	Монументальная методика развития создается поэтапно.
8. Перечисли модели системного ПО (4 tk.)
	1) водопадная модель 
	2) спиральная модель 
	3) инкрементная модель 
	4) прототипирование 
9. Преимущество агильных систем перед монументальными.
	не знаю
10. Почему важна документация и что нужно документировать?
1. Документация обеспечивает «общее пространство» проекта. Любой участник в любой момент времени может получить необходимую информацию как по конкретной задаче, так и по общему направлению работы.
2. Команда говорит «на одном языке» — ведь гораздо проще понять человека, сообщающего «об ошибке в функции, описанной в Use Case №12», чем «о стрёмном баге в той фигне, которую Вася месяц назад делал». 
3. Документирование позволяет четко разграничить зоны ответственности между участниками проекта.
4. Только тщательно описанные требования могут быть проверены на полноту и непротиворечивость. «Наколенные записки» — прямой и очень быстрый путь к тому, что границы проекта расползутся резвыми тараканами, а функционал, задуманный вначале, не будет монтироваться с возникающими в процессе «хотелками» заказчика.
